<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NonBlocking</name>
    </assembly>
    <members>
        <member name="T:NonBlocking.ConcurrentDictionary`2">
            <summary>
            Represents a thread-safe and lock-free collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <remarks>
            All public and protected members of <see cref="T:NonBlocking.ConcurrentDictionary`2"/> are thread-safe and may be used
            concurrently from multiple threads.
            </remarks>
        </member>
        <member name="F:NonBlocking.ConcurrentDictionary`2.DefaultCapacity">
            <summary>The default capacity, i.e. the initial # of buckets.</summary>
            <remarks>
            When choosing this value, we are making a trade-off between the size of a very small dictionary,
            and the number of resizes when constructing a large dictionary.
            </remarks>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.DefaultConcurrencyLevel">
            <summary>Concurrency level is ignored. However it must be > 0.</summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that is empty, has the default concurrency level, has the default initial capacity, and
            uses the default comparer for the key type.
            </summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that is empty, has the specified concurrency level and capacity, and uses the default
            comparer for the key type.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:NonBlocking.ConcurrentDictionary`2"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="concurrencyLevel"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>, has the default concurrency
            level, has the default initial capacity, and uses the default comparer for the key type.
            </summary>
            <param name="collection">The <see
            cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that is empty, has the specified concurrency level and capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.</param>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"/>, has the default concurrency
            level, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"/>,
            has the specified concurrency level, has the specified initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="concurrencyLevel">
            The estimated number of threads that will update the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> concurrently.
            </param>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new
            <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="concurrencyLevel"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            class that is empty, has the specified concurrency level, has the specified initial capacity, and
            uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="concurrencyLevel"/> is less than 1. -or- <paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add the specified key and value to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be a null reference (Nothing
            in Visual Basic) for reference types.</param>
            <returns>
            true if the key/value pair was added to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The <see cref="T:NonBlocking.ConcurrentDictionary`2"/> contains too many elements.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.</param>
            <returns>true if the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Attempts to remove and return the value with the specified key from the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove and return.</param>
            <param name="value">
            When this method returns, <paramref name="value"/> contains the object removed from the
            <see cref="T:NonBlocking.ConcurrentDictionary`2"/> or the default value of <typeparamref
            name="TValue"/> if the operation failed.
            </param>
            <returns>true if an object was removed successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.TryRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Removes a key and value from the dictionary.</summary>
            <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> representing the key and value to remove.</param>
            <returns>
            true if the key and value represented by <paramref name="item"/> are successfully
            found and removed; otherwise, false.
            </returns>
            <remarks>
            Both the specifed key and value must match the entry in the dictionary for it to be removed.
            The key is compared using the dictionary's comparer (or the default comparer for <typeparamref name="TKey"/>
            if no comparer was provided to the dictionary when it was constructed).  The value is compared using the
            default comparer for <typeparamref name="TValue"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> property of <paramref name="item"/> is a null reference.
            </exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the value associated with the specified key from the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, <paramref name="value"/> contains the object from
            the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> with the specified key or the default value of
            <typeparamref name="TValue"/>, if the operation failed.
            </param>
            <returns>true if the key was found in the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
            <summary>
            Updates the value associated with <paramref name="key"/> to <paramref name="newValue"/> if the existing value is equal
            to <paramref name="comparisonValue"/>.
            </summary>
            <param name="key">The key whose value is compared with <paramref name="comparisonValue"/> and
            possibly replaced.</param>
            <param name="newValue">The value that replaces the value of the element with <paramref
            name="key"/> if the comparison results in equality.</param>
            <param name="comparisonValue">The value that is compared to the value of the element with
            <paramref name="key"/>.</param>
            <returns>
            true if the value with <paramref name="key"/> was equal to <paramref name="comparisonValue"/> and
            replaced with <paramref name="newValue"/>; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2"/>,
            starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that is the destination of the <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/> elements copied from the <see  cref="T:System.Collections.ICollection"/>. The array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>. -or- The number of
            elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to
            the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.ToArray">
            <summary>
            Copies the key and value pairs stored in the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> to a
            new array.
            </summary>
            <returns>A new array containing a snapshot of key and value pairs copied from the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.
            </returns>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.CopyToPairs(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>Copy dictionary contents to an array.</summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.CopyToEntries(System.Collections.DictionaryEntry[],System.Int32)">
            <summary>Copy dictionary contents to an array.</summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.CopyToObjects(System.Object[],System.Int32)">
            <summary>Copy dictionary contents to an array.</summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>.</summary>
            <returns>An enumerator for the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.</returns>
            <remarks>
            The enumerator returned from the dictionary is safe to use concurrently with
            reads and writes to the dictionary, however it does not represent a moment-in-time snapshot
            of the dictionary.  The contents exposed through the enumerator may contain modifications
            made to the dictionary after <see cref="M:NonBlocking.ConcurrentDictionary`2.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.Item(`0)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <param name="key">The key of the value to get or set.</param>
            <value>
            The value associated with the specified key. If the specified key is not found, a get operation throws a
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.
            </value>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> does not exist in the collection.
            </exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.ThrowKeyNotFoundException(`0)">
            <summary>Throws a KeyNotFoundException.</summary>
            <remarks>Separate from ThrowHelper to avoid boxing at call site while reusing this generic instantiation.</remarks>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            that is used to determine equality of keys for the dictionary.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation
            that is used to determine equality of keys for the current
            <see cref="T:NonBlocking.ConcurrentDictionary`2" /> and to provide hash values for the keys.
            </value>
            <remarks>
            <see cref="T:NonBlocking.ConcurrentDictionary`2" /> requires an equality implementation to determine
            whether keys are equal. You can specify an implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            generic interface by using a constructor that accepts a comparer parameter;
            if you do not specify one, the default generic equality comparer <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> is used.
            </remarks>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>.
            </summary>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <value>The number of key/value pairs contained in the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>.</value>
            <remarks>Count has snapshot semantics and represents the number of items in the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>
            at the moment when Count was accessed.</remarks>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the
            key is already in the dictionary, or the new value for the key as returned by valueFactory
            if the key was not in the dictionary.</returns>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)">
            <summary>
            Adds a key/value pair to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <param name="factoryArgument">An argument value to pass into <paramref name="valueFactory"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the
            key is already in the dictionary, or the new value for the key as returned by valueFactory
            if the key was not in the dictionary.</returns>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>
            if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">the value to be added, if the key does not already exist</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The value for the key.  This will be either the existing value for the key if the
            key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
            <summary>
            Adds a key/value pair to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> if the key does not already
            exist, or updates a key/value pair in the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> if the key
            already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValueFactory">The function used to generate a value for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key
            based on the key's existing value</param>
            <param name="factoryArgument">An argument to pass into <paramref name="addValueFactory"/> and <paramref name="updateValueFactory"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="addValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The new value for the key.  This will be either be the result of addValueFactory (if the key was
            absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> if the key does not already
            exist, or updates a key/value pair in the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> if the key
            already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValueFactory">The function used to generate a value for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key
            based on the key's existing value</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="addValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The new value for the key.  This will be either the result of addValueFactory (if the key was
            absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> if the key does not already
            exist, or updates a key/value pair in the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> if the key
            already exists.
            </summary>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValue">The value to be added for an absent key</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on
            the key's existing value</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="updateValueFactory"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <returns>The new value for the key.  This will be either the value of addValue (if the key was
            absent) or the result of updateValueFactory (if the key was present).</returns>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> is empty.
            </summary>
            <value>true if the <see cref="T:NonBlocking.ConcurrentDictionary`2"/> is empty; otherwise,
            false.</value>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
            Adds the specified key and value to the <see
            cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see
            cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully remove; otherwise false. This method also returns
            false if
            <paramref name="key"/> was not found in the original <see
            cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see
            cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys in the
            <see cref="T:System.Collections.Generic.Dictionary`2"/>.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of
            the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of
            the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see
            cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in
            the
            <see cref="T:System.Collections.Generic.Dictionary`2"/>.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the values
            in the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the
            values in the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.</value>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1"/>
            with the specified key.
            </summary>
            <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            structure representing the key and value to add to the <see
            cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="keyValuePair"/> of <paramref
            name="keyValuePair"/> is null.</exception>
            <exception cref="T:System.OverflowException">The <see
            cref="T:System.Collections.Generic.Dictionary`2"/>
            contains too many elements.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the
            <see cref="T:System.Collections.Generic.Dictionary`2"/></exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/>
            contains a specific key and value.
            </summary>
            <param name="keyValuePair">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            structure to locate in the <see
            cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>true if the <paramref name="keyValuePair"/> is found in the <see
            cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is
            read-only; otherwise, false. For <see
            cref="T:System.Collections.Generic.Dictionary`2"/>, this property always returns
            false.</value>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="keyValuePair">The <see
            cref="T:System.Collections.Generic.KeyValuePair`2"/>
            structure representing the key and value to remove from the <see
            cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>true if the key and value represented by <paramref name="keyValuePair"/> is successfully
            found and removed; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The Key property of <paramref
            name="keyValuePair"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>.</summary>
            <returns>An enumerator for the <see cref="T:NonBlocking.ConcurrentDictionary`2"/>.</returns>
            <remarks>
            The enumerator returned from the dictionary is safe to use concurrently with
            reads and writes to the dictionary, however it does not represent a moment-in-time snapshot
            of the dictionary.  The contents exposed through the enumerator may contain modifications
            made to the dictionary after <see cref="M:NonBlocking.ConcurrentDictionary`2.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key.</param>
            <param name="value">The object to use as the value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.OverflowException">The dictionary contains too many
            elements.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="key"/> is of a type that is not assignable to the key type <typeparamref
            name="TKey"/> of the <see cref="T:System.Collections.Generic.Dictionary`2"/>. -or-
            <paramref name="value"/> is of a type that is not assignable to <typeparamref name="TValue"/>,
            the type of values in the <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            -or- A value with the same key already exists in the <see
            cref="T:System.Collections.Generic.Dictionary`2"/>.
            </exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Gets whether the <see cref="T:System.Collections.IDictionary"/> contains an
            element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see
            cref="T:System.Collections.IDictionary"/>.</param>
            <returns>true if the <see cref="T:System.Collections.IDictionary"/> contains
            an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>Provides an <see cref="T:System.Collections.IDictionaryEnumerator"/> for the
            <see cref="T:System.Collections.IDictionary"/>.</summary>
            <returns>An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see
            cref="T:System.Collections.IDictionary"/>.</returns>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see
            cref="T:System.Collections.IDictionary"/> has a fixed size.
            </summary>
            <value>true if the <see cref="T:System.Collections.IDictionary"/> has a
            fixed size; otherwise, false. For <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>, this property always
            returns false.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see
            cref="T:System.Collections.IDictionary"/> is read-only.
            </summary>
            <value>true if the <see cref="T:System.Collections.IDictionary"/> is
            read-only; otherwise, false. For <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>, this property always
            returns false.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the keys of the <see
            cref="T:System.Collections.IDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the keys of the <see
            cref="T:System.Collections.IDictionary"/>.</value>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see
            cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values in the <see
            cref="T:System.Collections.IDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the values in the <see
            cref="T:System.Collections.IDictionary"/>.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key, or a null reference (Nothing in Visual Basic)
            if <paramref name="key"/> is not in the dictionary or <paramref name="key"/> is of a type that is
            not assignable to the key type <typeparamref name="TKey"/> of the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">
            A value is being assigned, and <paramref name="key"/> is of a type that is not assignable to the
            key type <typeparamref name="TKey"/> of the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>. -or- A value is being
            assigned, and <paramref name="key"/> is of a type that is not assignable to the value type
            <typeparamref name="TValue"/> of the <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>
            </exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an array, starting
            at the specified array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from
            the <see cref="T:System.Collections.ICollection"/>. The array must have zero-based
            indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying
            begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference
            (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than
            0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than
            the length of the <paramref name="array"/>. -or- The number of elements in the source <see
            cref="T:System.Collections.ICollection"/>
            is greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>.</exception>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is
            synchronized with the SyncRoot.
            </summary>
            <value>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            (thread safe); otherwise, false. For <see
            cref="T:NonBlocking.ConcurrentDictionary`2"/>, this property always
            returns false.</value>
        </member>
        <member name="P:NonBlocking.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see
            cref="T:System.Collections.ICollection"/>. This property is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.GetKeys">
            <summary>
            Gets a collection containing the keys in the dictionary.
            </summary>
        </member>
        <member name="M:NonBlocking.ConcurrentDictionary`2.GetValues">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="M:NonBlocking.DictionaryImpl`3.IsValueAtomicPrimitive">
            <summary>
            Determines whether type TValue can be written atomically
            </summary>
        </member>
        <member name="M:NonBlocking.DictionaryImpl`3.TryGetValue(`0)">
            <summary>
            returns null if value is not present in the table
            otherwise returns the actual value or NULLVALUE if null is the actual value
            </summary>
        </member>
        <member name="M:NonBlocking.DictionaryImpl`3.RemoveIfMatch(`0,`2@,NonBlocking.DictionaryImpl.ValueMatch)">
            <summary>
            returns true if value was removed from the table.
            oldVal contains original value or default(TValue), if it was not present in the table
            </summary>
        </member>
        <member name="T:NonBlocking.Counter32">
            <summary>
            Scalable 32bit counter that can be used from multiple threads.
            </summary>
        </member>
        <member name="M:NonBlocking.Counter32.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:NonBlocking.Counter32"/>
            </summary>
        </member>
        <member name="P:NonBlocking.Counter32.Value">
            <summary>
            Returns the value of the counter at the time of the call.
            </summary>
            <remarks>
            The value may miss in-progress updates if the counter is being concurrently modified.
            </remarks>
        </member>
        <member name="P:NonBlocking.Counter32.EstimatedValue">
            <summary>
            Returns the approximate value of the counter at the time of the call.
            </summary>
            <remarks>
            EstimatedValue could be significantly cheaper to obtain, but may be slightly delayed.
            </remarks>
        </member>
        <member name="M:NonBlocking.Counter32.Increment">
            <summary>
            Increments the counter by 1.
            </summary>
        </member>
        <member name="M:NonBlocking.Counter32.Decrement">
            <summary>
            Decrements the counter by 1.
            </summary>
        </member>
        <member name="M:NonBlocking.Counter32.Add(System.Int32)">
            <summary>
            Increments the counter by 'value'.
            </summary>
        </member>
        <member name="T:NonBlocking.Counter64">
            <summary>
            Scalable 64bit counter that can be used from multiple threads.
            </summary>
        </member>
        <member name="M:NonBlocking.Counter64.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:NonBlocking.Counter32"/>
            </summary>
        </member>
        <member name="P:NonBlocking.Counter64.Value">
            <summary>
            Returns the value of the counter at the time of the call.
            </summary>
            <remarks>
            The value may miss in-progress updates if the counter is being concurrently modified.
            </remarks>
        </member>
        <member name="P:NonBlocking.Counter64.EstimatedValue">
            <summary>
            Returns the approximate value of the counter at the time of the call.
            </summary>
            <remarks>
            EstimatedValue could be significantly cheaper to obtain, but may be slightly delayed.
            </remarks>
        </member>
        <member name="M:NonBlocking.Counter64.Increment">
            <summary>
            Increments the counter by 1.
            </summary>
        </member>
        <member name="M:NonBlocking.Counter64.Decrement">
            <summary>
            Decrements the counter by 1.
            </summary>
        </member>
        <member name="M:NonBlocking.Counter64.Add(System.Int32)">
            <summary>
            Increments the counter by 'value'.
            </summary>
        </member>
        <member name="T:NonBlocking.CounterBase">
            <summary>
            Scalable counter base.
            </summary>
        </member>
    </members>
</doc>
